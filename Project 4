/*
 * This program reads student information from a specified text file.
 * Each student has an associated first and last name, variable number of
 *  homework scores, and one test score. The program computes the weighted
 * average score for each student, and sorts the data based on names.
 * The updated information is written to a specified text file.
 * Written by: Carl Sable, Edited by: Ross Kaplan
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

int NUM_HW; /*This was changed so that we could have a variable number of homeworks*/

int array[5] = {0};

struct student
{
    char lastName[30];  /* last name */
    char firstName[30]; /* first name */
    int *homeworks;  /* scores on homeworks */
    int test;  /* score on test */
    float final;  /* final average */
    char grade; /* letter grade */
};

typedef struct student STUDENT;

STUDENT *input_students(int *);
void compute_averages(STUDENT [], int);
void sort_students(STUDENT [], int);
void swap_students(STUDENT *, STUDENT *);
void display_students(STUDENT [], int);

int main(void)
{
    
    STUDENT *pStudents;
    int numStudents;
    pStudents = input_students(&numStudents);
    compute_averages(pStudents, numStudents);
    sort_students(pStudents, numStudents);
    display_students(pStudents, numStudents);
    
    free(pStudents);
    
    return 0;
}

/* Read all student data from a specified text file */
STUDENT *input_students(int *pNumStudents)
{
    int x, y;
    char filenameInput[100];
    FILE *fpInput;
    STUDENT *pStudents;
    
    printf("Enter name of input file: ");
    scanf("%s", filenameInput);
    
    fpInput = fopen(filenameInput, "r");
    if (fpInput == NULL)
    {
        fprintf(stderr, "Error: Could not open input file!\n");
        exit(1);
    }
    
    /* First line of input file contains number of students */
    fscanf(fpInput, "%d", pNumStudents);
    fscanf(fpInput, "%d", &NUM_HW);
    /* Allocate necessary memory to store student info */
    pStudents = (STUDENT *)malloc(sizeof(STUDENT) * *pNumStudents);
    if (pStudents == NULL)
    {
        fprintf(stderr, "Error: Out of memory!\n");
        exit(1);
    }
    
    /* Read information about students */
    for (x = 0; x < *pNumStudents; x++)
    {
        /* Input file lists names as first name followed by last name */
        fscanf(fpInput, "%s %s",
               pStudents[x].firstName,
               pStudents[x].lastName);
        /* Dynamically allocated memory is necessary if the number of homeworks (a size) is variable*/
        pStudents[x].homeworks = (int*) malloc(sizeof(int) * NUM_HW);
        
        for (y = 0; y < NUM_HW; y++) /* Read homework scores */
            fscanf(fpInput, "%d", &pStudents[x].homeworks[y]);
        fscanf(fpInput, "%d", &pStudents[x].test); /* Read test score */
    }
    
    fclose(fpInput);
    
    return pStudents;
}

/*
 * Computes final average for each student.
 * Assumes homework is worth (1-z)% (in total) and test is worth z%.
 */
void compute_averages(STUDENT arrS[], int numStudents)
{
    float z;
    
    printf("\nPlease enter a decimal fraction between 0 and 1 indicating the percentage of the final average determined by the test score: ");
    scanf("%f", &z);
    
    int x, y;
    int h_tot;
    
    for (x = 0; x < numStudents; x++)
    {
        h_tot = 0;
        for (y = 0; y < NUM_HW; y++)
            h_tot = h_tot + arrS[x].homeworks[y];
		/* This is the way to categorize everybody based on final averages into letter grades */
        arrS[x].final = (((1-z) * h_tot / NUM_HW) + ((z) * arrS[x].test));
        
        if (arrS[x].final <= 100 && arrS[x].final >= 90)
            arrS[x].grade = 'A';
        if (arrS[x].final < 90 && arrS[x].final >= 80)
            arrS[x].grade = 'B';
        if (arrS[x].final < 80 && arrS[x].final >= 70)
            arrS[x].grade = 'C';
        if (arrS[x].final < 70 && arrS[x].final >= 60)
            arrS[x].grade = 'D';
        if (arrS[x].final < 60 && arrS[x].final >= 0)
            arrS[x].grade = 'F';
    
        /* This allows us to count how many of each letter grades there are */
        
        if(arrS[x].grade == 'A')
            array[0]++;
        if(arrS[x].grade == 'B')
            array[1]++;
        if(arrS[x].grade == 'C')
            array[2]++;
        if(arrS[x].grade == 'D')
            array[3]++;
        if(arrS[x].grade == 'F')
            array[4]++;
    
    }
    
    return;
}

/* Use selection sort to sort students according to names or by averages. */
void sort_students(STUDENT arrS[], int numStudents)
{
    getchar();
    char nora;
    printf("Would you like to sort by last names (n) or averages (a)?");
    scanf("%c", &nora);
    
    if (nora != 'a' && nora != 'n')
    {
        printf("That is not an option");
        exit(1);
    }
    
    int index1, index2, indexS;
    
    /* Outder loop loops through all slots */
    for (index1 = 0; index1 < numStudents - 1; index1++)
    {
        indexS = index1;
        /* Inner loop finds the smallest element (either alphabetically or numerically) starting at index1 */
        for (index2 = index1 + 1; index2 < numStudents; index2++) {
            if (nora == 'n')
                if ((strcmp(arrS[indexS].lastName, arrS[index2].lastName) > 0) ||
                    ((strcmp(arrS[indexS].lastName, arrS[index2].lastName) == 0) &&
                     (strcmp(arrS[indexS].firstName, arrS[index2].firstName) > 0)))
                    indexS = index2;
            /* Sorts by averages */
            if ((nora == 'a') && (arrS[indexS].final <= arrS[index2].final))
                indexS = index2;
        }
        
        /* Swap the smallest element with the one at index1 if necessary */
            if (indexS != index1)
                swap_students(&arrS[index1], &arrS[indexS]);
    }
    return;
}

/* Exchanges the values of two students. */
void swap_students(STUDENT *pstud1, STUDENT *pstud2)
{
    STUDENT tmp;
    
    tmp = *pstud1;
    *pstud1 = *pstud2;
    *pstud2 = tmp;
    
    return;
}

/* Displays name, final average, a letter grade, and the count of each letter grade for each student. */
void display_students(STUDENT arrS[], int numStudents)
{
    int x;
    char filenameOutput[100];
    FILE *fpOutput;
    
    printf("\nEnter name of output file: ");
    scanf("%s", filenameOutput);
    
    fpOutput = fopen(filenameOutput, "w");
    
    /* Loop through all students */
    for (x = 0; x < numStudents; x++)
        fprintf(fpOutput, "%s, %s %.1f %c \n",
                arrS[x].lastName, /* In output, dispay last name first */
                arrS[x].firstName,
                arrS[x].final,
                arrS[x].grade);
    int k = 0;
    for (k = 0; k <= 3; k++)
    {
        fprintf(fpOutput, "\n");
        fprintf(fpOutput, "Count of %c: %d",'A' + k, array[k]);
    }
    fprintf(fpOutput, "\n");
    fprintf(fpOutput, "Count of F: %d", array[4]);
    fprintf(fpOutput, "\n");
    fclose(fpOutput);
    
    return;
}


